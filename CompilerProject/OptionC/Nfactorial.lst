     1                                  sys_exit	equ	1
     2                                  sys_read	equ	3
     3                                  sys_write	equ	4
     4                                  stdin		equ	0
     5                                  stdout		equ	1
     6                                  
     7                                  
     8                                  section	.data
     9 00000000 456E74657220612069-     	userMsg	db	'Enter a integer:(less than 32,765):'
     9 00000009 6E74656765723A286C-
     9 00000012 657373207468616E20-
     9 0000001B 33322C373635293A   
    10                                  	lenUserMsg	equ	$	-	userMsg
    11 00000023 596F7520656E746572-     	displayMsg	db	'You entered: '
    11 0000002C 65643A20           
    12                                  	lenDisplayMsg	equ	$-displayMsg
    13 00000030 0A                      	newline	db	0xA
    14 00000031 0A00                    	Ten	DW	10
    15 00000033 54656D706368617220-     	printTempchar	db	'Tempchar = :'
    15 0000003C 3D203A             
    16                                  	lenPrintTempchar	equ	$-printTempchar
    17 0000003F 416E733D                	Result	db	'Ans='
    18 00000043 6161616161              	ResultValue	db'aaaaa'
    19 00000048 0A                      			db	0xA
    20                                  	ResultEnd	equ	$-Result
    21 00000049 414243444546-           	num	times 6 db'ABCDEF'
    21 00000049 <rep 6h>           
    22                                  	numEnd		equ	$-num
    23 0000006D 0100                    	Lit1	DW	1
    24                                  
    25                                  
    26                                  section	.bss
    27 00000000 ??                      	TempChar	RESB	1
    28 00000001 ??                      	testchar	RESB	1
    29 00000002 ????                    	ReadInt		RESW	1
    30 00000004 ????                    	tempint		RESW	1
    31 00000006 ??                      	negflag		RESB	1
    32 00000007 ????                    	N		RESW	1
    33 00000009 ????                    	ANSWER		RESW	1
    34 0000000B ????                    	Temp1		RESW	1
    35 0000000D ????                    	Temp2		RESW	1
    36 0000000F ????                    	Temp3		RESW	1
    37 00000011 ????                    	Temp4		RESW	1
    38 00000013 ????                    	Temp5		RESW	1
    39 00000015 ????                    	Temp6		RESW	1
    40 00000017 ????                    	Temp7		RESW	1
    41                                  
    42                                  
    43                                  	global	_start
    44                                  
    45                                  section	.text
    46                                  
    47 00000000 90                      _start:		nop
    48 00000001 E8B9000000              Again:	call PrintString
    49 00000006 E8D3000000              	call GetAnInteger
    50 0000000B 668B0425[02000000]      	mov	ax,[ReadInt]
    51 00000013 66890425[07000000]      	mov	[N],ax
    52 0000001B 668B0425[6D000000]      	mov	ax,[Lit1]
    53 00000023 66890425[09000000]      	mov	[ANSWER],ax
    54 0000002B 668B0425[07000000]      W1:	mov	ax,[N]
    55 00000033 663B0425[6D000000]      	cmp	ax,[Lit1]
    56 0000003B 7E78                    	JLE	L1
    57 0000003D 668B0425[09000000]      	mov	ax,[ANSWER]
    58 00000045 66F72425[07000000]      	mul	word	[N]
    59 0000004D 66890425[0B000000]      	mov	[Temp1],ax
    60 00000055 668B0425[0B000000]      	mov	ax,[Temp1]
    61 0000005D 66890425[09000000]      	mov	[ANSWER],ax
    62 00000065 668B0425[07000000]      	mov	ax,[N]
    63 0000006D 662B0425[6D000000]      	sub	ax,[Lit1]
    64 00000075 66890425[0B000000]      	mov	[Temp1],ax
    65 0000007D 668B0425[0B000000]      	mov	ax,[Temp1]
    66 00000085 66890425[07000000]      	mov	[N],ax
    67 0000008D 668B0425[09000000]      	mov	ax,[ANSWER]
    68 00000095 E8AD000000              	call	ConvertIntegerToString
    69 0000009A B804000000              	mov	eax,4
    70 0000009F BB01000000              	mov	ebx,1
    71 000000A4 B9[3F000000]            	mov	ecx,Result
    72 000000A9 BA0A000000              	mov	edx,ResultEnd
    73 000000AE CD80                    	int	80h
    74 000000B0 E976FFFFFF              	JMP	W1
    75 000000B5 90                      L1:	NOP
    76                                  
    77                                  
    78                                  fini:
    79 000000B6 B801000000              	mov	eax,sys_exit
    80 000000BB 31DB                    	xor	ebx,ebx
    81 000000BD CD80                    	int	80h
    82                                  PrintString:
    83 000000BF 6650                    	push	ax
    84 000000C1 6652                    	push	dx
    85 000000C3 B804000000              	mov	eax,4
    86 000000C8 BB01000000              	mov	ebx,1
    87 000000CD B9[00000000]            	mov	ecx,userMsg
    88 000000D2 BA23000000              	mov	edx,lenUserMsg
    89 000000D7 CD80                    	int	80h
    90 000000D9 665A                    	pop	dx
    91 000000DB 6658                    	pop	ax
    92 000000DD C3                      	ret
    93                                  
    94                                  
    95                                  GetAnInteger:
    96 000000DE B803000000              	mov	eax,3
    97 000000E3 BB02000000              	mov	ebx,2
    98 000000E8 B9[49000000]            	mov	ecx,num
    99 000000ED BA06000000              	mov	edx,6
   100 000000F2 CD80                    	int	0x80
   101 000000F4 89C2                    	mov	edx,eax
   102 000000F6 B804000000              	mov	eax,4
   103 000000FB BB01000000              	mov	ebx,1
   104 00000100 CD80                    	int 80h
   105                                  ConvertStringToInteger:
   106 00000102 66B80000                	mov	ax,0
   107 00000106 66890425[02000000]      	mov[ReadInt],ax
   108 0000010E B9[49000000]            	mov	ecx,num
   109 00000113 66BB0000                	mov	bx,0
   110 00000117 678A19                  	mov	bl,byte[ecx]
   111 0000011A 80EB30                  Next:	sub	bl,'0'
   112 0000011D 668B0425[02000000]      	mov	ax,[ReadInt]
   113 00000125 66BA0A00                	mov	dx,10
   114 00000129 66F7E2                  	mul	dx
   115 0000012C 6601D8                  	add	ax,bx
   116 0000012F 66890425[02000000]      	mov	[ReadInt],ax
   117 00000137 66BB0000                	mov	bx,0
   118 0000013B 83C101                  	add	ecx,1
   119 0000013E 678A19                  	mov	bl,byte[ecx]
   120 00000141 80FB0A                  	cmp	bl,0XA
   121 00000144 75D4                    	jne	Next
   122 00000146 C3                      	ret
   123                                  
   124                                  
   125                                  ConvertIntegerToString:
   126 00000147 BB[47000000]            	mov	ebx,ResultValue + 4
   127                                  ConvertLoop:
   128 0000014C 6629D2                  	sub	dx,dx
   129 0000014F 66B90A00                	mov	cx,10
   130 00000153 66F7F1                  	div	cx
   131 00000156 80C230                  	add	dl,'0'
   132 00000159 678813                  	mov [ebx], dl
   133 0000015C FFCB                    	dec	ebx
   134 0000015E 81FB[43000000]          	cmp	ebx,ResultValue
   135 00000164 7DE6                    	jge	ConvertLoop
   136 00000166 C3                      	ret
